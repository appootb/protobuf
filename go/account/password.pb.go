// Code generated by protoc-gen-go. DO NOT EDIT.
// source: password.proto

package account

import (
	context "context"
	fmt "fmt"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Account password request.
type PasswordRequest struct {
	Password             *string  `protobuf:"bytes,1,req,name=password" json:"password,omitempty"`
	OldPassword          *string  `protobuf:"bytes,2,opt,name=old_password,json=oldPassword" json:"old_password,omitempty"`
	VerifyCode           *string  `protobuf:"bytes,3,opt,name=verify_code,json=verifyCode" json:"verify_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PasswordRequest) Reset()         { *m = PasswordRequest{} }
func (m *PasswordRequest) String() string { return proto.CompactTextString(m) }
func (*PasswordRequest) ProtoMessage()    {}
func (*PasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3819adb3c6759fd8, []int{0}
}

func (m *PasswordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PasswordRequest.Unmarshal(m, b)
}
func (m *PasswordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PasswordRequest.Marshal(b, m, deterministic)
}
func (m *PasswordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordRequest.Merge(m, src)
}
func (m *PasswordRequest) XXX_Size() int {
	return xxx_messageInfo_PasswordRequest.Size(m)
}
func (m *PasswordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordRequest proto.InternalMessageInfo

func (m *PasswordRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *PasswordRequest) GetOldPassword() string {
	if m != nil && m.OldPassword != nil {
		return *m.OldPassword
	}
	return ""
}

func (m *PasswordRequest) GetVerifyCode() string {
	if m != nil && m.VerifyCode != nil {
		return *m.VerifyCode
	}
	return ""
}

func init() {
	proto.RegisterType((*PasswordRequest)(nil), "appootb.account.PasswordRequest")
}

func init() { proto.RegisterFile("password.proto", fileDescriptor_3819adb3c6759fd8) }

var fileDescriptor_3819adb3c6759fd8 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x3d, 0x4f, 0xc2, 0x50,
	0x14, 0xcd, 0x2b, 0x7e, 0xc0, 0x43, 0x24, 0xd6, 0xa8, 0xa4, 0x31, 0x01, 0x49, 0x34, 0xc4, 0xa1,
	0x2f, 0x61, 0x74, 0x12, 0x58, 0x1c, 0x9b, 0x12, 0x17, 0x43, 0x42, 0x4a, 0x7b, 0x29, 0xcf, 0xb4,
	0xbd, 0xa5, 0xef, 0x55, 0x63, 0x5c, 0x8c, 0x7f, 0xc1, 0x95, 0xc9, 0xd1, 0x9f, 0xc2, 0xea, 0xc2,
	0x0f, 0xf0, 0x47, 0x38, 0x1a, 0xe8, 0xc7, 0x80, 0x8c, 0x8c, 0xf7, 0x9c, 0x73, 0xcf, 0x39, 0x37,
	0xef, 0xd1, 0xc3, 0xd0, 0x12, 0xe2, 0x19, 0x23, 0x47, 0x0f, 0x23, 0x94, 0xa8, 0x56, 0xad, 0x30,
	0x44, 0x94, 0x23, 0xdd, 0xb2, 0x6d, 0x8c, 0x03, 0xa9, 0xd5, 0x53, 0x80, 0x85, 0x10, 0xf9, 0x5c,
	0x08, 0x8e, 0x01, 0xf3, 0x41, 0x4e, 0x30, 0xdd, 0xd0, 0xce, 0x5d, 0x44, 0xd7, 0x03, 0x66, 0x85,
	0x9c, 0x59, 0x41, 0x80, 0xd2, 0x92, 0x1c, 0x03, 0x91, 0xb2, 0x15, 0x1e, 0xd8, 0x5e, 0xec, 0x40,
	0x32, 0x36, 0xa7, 0xb4, 0x6a, 0xa4, 0x81, 0x26, 0x4c, 0x63, 0x10, 0x52, 0xd5, 0x68, 0x31, 0xeb,
	0x50, 0x23, 0x0d, 0xa5, 0x55, 0x32, 0xf3, 0x59, 0xbd, 0xa0, 0x07, 0xe8, 0x39, 0xc3, 0x9c, 0x57,
	0x1a, 0xa4, 0x55, 0x32, 0xcb, 0xe8, 0x39, 0x99, 0x8b, 0x5a, 0xa7, 0xe5, 0x27, 0x88, 0xf8, 0xf8,
	0x65, 0x68, 0xa3, 0x03, 0xb5, 0xc2, 0x4a, 0x41, 0x13, 0xa8, 0x87, 0x0e, 0xb4, 0xe7, 0x0a, 0x2d,
	0xe6, 0x6a, 0x97, 0x16, 0xfa, 0x20, 0xd5, 0x86, 0xbe, 0x76, 0xa6, 0xbe, 0xd6, 0x4a, 0x3b, 0xfb,
	0xa7, 0xe8, 0x83, 0x1d, 0x81, 0x6c, 0x5e, 0x2e, 0x66, 0xe4, 0x76, 0x31, 0x23, 0x6f, 0x3b, 0xef,
	0xdf, 0x3f, 0x1f, 0xca, 0x69, 0xf3, 0x88, 0xa5, 0x0a, 0x96, 0xd5, 0xbc, 0x21, 0xd7, 0xea, 0x23,
	0xdd, 0xbb, 0x0f, 0x1d, 0x4b, 0xc2, 0x36, 0xb3, 0xda, 0x9b, 0xb3, 0x38, 0xdd, 0x35, 0x41, 0x6c,
	0xf7, 0x2c, 0x6d, 0x63, 0x54, 0xf7, 0x95, 0x1e, 0xdb, 0xe8, 0xaf, 0x9b, 0x74, 0x2b, 0x59, 0x8e,
	0xb1, 0x7c, 0xe5, 0x3b, 0x62, 0x90, 0x87, 0x2b, 0x97, 0xcb, 0x49, 0x3c, 0xd2, 0x6d, 0xf4, 0x59,
	0xfe, 0x85, 0x96, 0xec, 0x28, 0x1e, 0x33, 0x17, 0x33, 0xf7, 0x5f, 0x42, 0x3e, 0x95, 0x42, 0xcf,
	0xe8, 0x7e, 0x29, 0xfb, 0x9d, 0x04, 0x9a, 0x2b, 0x27, 0x9d, 0x64, 0x61, 0xb0, 0xb2, 0x1b, 0xa4,
	0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xb2, 0x7d, 0x65, 0xac, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PasswordClient is the client API for Password service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordClient interface {
	// Set account password.
	Set(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error)
	// Update account password.
	Update(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error)
	// Reset account password.
	Reset(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error)
}

type passwordClient struct {
	cc *grpc.ClientConn
}

func NewPasswordClient(cc *grpc.ClientConn) PasswordClient {
	return &passwordClient{cc}
}

func (c *passwordClient) Set(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/appootb.account.Password/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) Update(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/appootb.account.Password/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) Reset(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*Secret, error) {
	out := new(Secret)
	err := c.cc.Invoke(ctx, "/appootb.account.Password/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServer is the server API for Password service.
type PasswordServer interface {
	// Set account password.
	Set(context.Context, *PasswordRequest) (*Secret, error)
	// Update account password.
	Update(context.Context, *PasswordRequest) (*Secret, error)
	// Reset account password.
	Reset(context.Context, *PasswordRequest) (*Secret, error)
}

// UnimplementedPasswordServer can be embedded to have forward compatible implementations.
type UnimplementedPasswordServer struct {
}

func (*UnimplementedPasswordServer) Set(ctx context.Context, req *PasswordRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedPasswordServer) Update(ctx context.Context, req *PasswordRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPasswordServer) Reset(ctx context.Context, req *PasswordRequest) (*Secret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterPasswordServer(s *grpc.Server, srv PasswordServer) {
	s.RegisterService(&_Password_serviceDesc, srv)
}

func _Password_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.account.Password/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Set(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.account.Password/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Update(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.account.Password/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Reset(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Password_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.account.Password",
	HandlerType: (*PasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Password_Set_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Password_Update_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Password_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password.proto",
}
