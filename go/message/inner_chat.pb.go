// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inner_chat.proto

package message

import (
	context "context"
	fmt "fmt"
	common "github.com/appootb/protobuf/go/common"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("inner_chat.proto", fileDescriptor_0c95ff7eff2c16d4) }

var fileDescriptor_0c95ff7eff2c16d4 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x49, 0x2c, 0x14, 0x03, 0xfe, 0x10, 0x51, 0x4a, 0x2a, 0x52, 0xba, 0xe8, 0xa2, 0x8b,
	0x19, 0x70, 0xe9, 0xce, 0x56, 0xc1, 0x22, 0x42, 0x36, 0x6e, 0x4a, 0xb1, 0x4c, 0x27, 0x63, 0x7a,
	0x69, 0x32, 0x37, 0x26, 0x93, 0x82, 0xe0, 0x42, 0x7c, 0x05, 0x37, 0xae, 0x5d, 0xfa, 0x28, 0x2e,
	0xf5, 0x15, 0x7c, 0x08, 0x97, 0x92, 0x99, 0x49, 0x91, 0xa2, 0xcb, 0xb9, 0x67, 0xee, 0x77, 0xce,
	0x3d, 0xde, 0x2e, 0x48, 0x29, 0xf2, 0x29, 0x9f, 0x33, 0x45, 0xb2, 0x1c, 0x15, 0xfa, 0x3b, 0x2c,
	0xcb, 0x10, 0xd5, 0x8c, 0xa4, 0xa2, 0x28, 0x58, 0x2c, 0x82, 0x23, 0x3b, 0xa0, 0x1c, 0xd3, 0x14,
	0x25, 0x2d, 0x25, 0xdc, 0x95, 0x62, 0x0a, 0x91, 0x59, 0x08, 0x3a, 0xb5, 0x9e, 0x89, 0x3c, 0x85,
	0xa2, 0x00, 0x94, 0xb4, 0x10, 0xf9, 0x12, 0xb8, 0xb0, 0x3f, 0x0e, 0x63, 0xc4, 0x38, 0x11, 0x94,
	0x65, 0x40, 0x99, 0x94, 0xa8, 0x98, 0x02, 0x94, 0x85, 0x55, 0xdb, 0x56, 0xd5, 0xaf, 0x59, 0x79,
	0x4b, 0x45, 0x9a, 0xa9, 0x7b, 0x2b, 0x6e, 0x81, 0xe4, 0x49, 0x19, 0x59, 0xd2, 0xf1, 0x87, 0xe3,
	0x6d, 0x8e, 0xaa, 0xc4, 0xc3, 0x39, 0x53, 0x3e, 0xf7, 0x9a, 0x67, 0x22, 0x81, 0xa5, 0xc8, 0xfd,
	0x16, 0x59, 0x8b, 0x4d, 0x42, 0xc6, 0x17, 0x55, 0xfc, 0x03, 0x62, 0xf8, 0xa4, 0xe6, 0x93, 0xf3,
	0x8a, 0xdf, 0xed, 0x3d, 0x7d, 0x7e, 0x3d, 0xbb, 0x9d, 0x6e, 0x9b, 0xda, 0x0d, 0xaa, 0xab, 0xa0,
	0x55, 0x15, 0x34, 0x32, 0xd8, 0x13, 0xa7, 0xef, 0x8f, 0xbd, 0xc6, 0x25, 0xf0, 0xc5, 0x2f, 0x07,
	0xd3, 0x03, 0xb9, 0xd6, 0x3d, 0x8c, 0xa2, 0x7f, 0x1d, 0x3a, 0xda, 0x21, 0xe8, 0xb7, 0xfe, 0x72,
	0xe0, 0x28, 0x65, 0xd0, 0x78, 0xb9, 0x79, 0x74, 0x07, 0x0f, 0xde, 0x1e, 0xc7, 0x74, 0xfd, 0x80,
	0xc1, 0xf6, 0xea, 0xd0, 0xb0, 0xe2, 0x5e, 0x38, 0xa1, 0x33, 0xee, 0xc5, 0xa0, 0xe6, 0xa5, 0x8e,
	0x40, 0x57, 0xb5, 0xd7, 0xbd, 0xc5, 0x58, 0x1b, 0x7d, 0x3b, 0xce, 0xab, 0xbb, 0x31, 0x0c, 0x07,
	0x6f, 0x6e, 0xf3, 0xca, 0x8c, 0xde, 0xdd, 0xfd, 0x53, 0xb3, 0x30, 0xd1, 0xb8, 0x89, 0x9d, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xb1, 0xd5, 0xd2, 0x02, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InnerChatClient is the client API for InnerChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InnerChatClient interface {
	// Deliver message.
	Deliver(ctx context.Context, in *Package, opts ...grpc.CallOption) (*empty.Empty, error)
	// Kick the connection.
	Kick(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type innerChatClient struct {
	cc *grpc.ClientConn
}

func NewInnerChatClient(cc *grpc.ClientConn) InnerChatClient {
	return &innerChatClient{cc}
}

func (c *innerChatClient) Deliver(ctx context.Context, in *Package, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.message.InnerChat/Deliver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerChatClient) Kick(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.message.InnerChat/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnerChatServer is the server API for InnerChat service.
type InnerChatServer interface {
	// Deliver message.
	Deliver(context.Context, *Package) (*empty.Empty, error)
	// Kick the connection.
	Kick(context.Context, *common.UniqueId) (*empty.Empty, error)
}

// UnimplementedInnerChatServer can be embedded to have forward compatible implementations.
type UnimplementedInnerChatServer struct {
}

func (*UnimplementedInnerChatServer) Deliver(ctx context.Context, req *Package) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (*UnimplementedInnerChatServer) Kick(ctx context.Context, req *common.UniqueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}

func RegisterInnerChatServer(s *grpc.Server, srv InnerChatServer) {
	s.RegisterService(&_InnerChat_serviceDesc, srv)
}

func _InnerChat_Deliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Package)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerChatServer).Deliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.message.InnerChat/Deliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerChatServer).Deliver(ctx, req.(*Package))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnerChat_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerChatServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.message.InnerChat/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerChatServer).Kick(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

var _InnerChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.message.InnerChat",
	HandlerType: (*InnerChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deliver",
			Handler:    _InnerChat_Deliver_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _InnerChat_Kick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner_chat.proto",
}
