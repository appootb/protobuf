// Code generated by protoc-gen-go. DO NOT EDIT.
// source: room.proto

package message

import (
	context "context"
	fmt "fmt"
	_ "github.com/appootb/protobuf/go/api"
	common "github.com/appootb/protobuf/go/common"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Room server connect option.
type RoomServerOption struct {
	Host                 *string  `protobuf:"bytes,1,req,name=host" json:"host,omitempty"`
	Port                 *uint32  `protobuf:"varint,2,opt,name=port,def=443" json:"port,omitempty"`
	Secure               *bool    `protobuf:"varint,3,opt,name=secure,def=1" json:"secure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomServerOption) Reset()         { *m = RoomServerOption{} }
func (m *RoomServerOption) String() string { return proto.CompactTextString(m) }
func (*RoomServerOption) ProtoMessage()    {}
func (*RoomServerOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5fd27dd97284ef4, []int{0}
}

func (m *RoomServerOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoomServerOption.Unmarshal(m, b)
}
func (m *RoomServerOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoomServerOption.Marshal(b, m, deterministic)
}
func (m *RoomServerOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomServerOption.Merge(m, src)
}
func (m *RoomServerOption) XXX_Size() int {
	return xxx_messageInfo_RoomServerOption.Size(m)
}
func (m *RoomServerOption) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomServerOption.DiscardUnknown(m)
}

var xxx_messageInfo_RoomServerOption proto.InternalMessageInfo

const Default_RoomServerOption_Port uint32 = 443
const Default_RoomServerOption_Secure bool = true

func (m *RoomServerOption) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *RoomServerOption) GetPort() uint32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_RoomServerOption_Port
}

func (m *RoomServerOption) GetSecure() bool {
	if m != nil && m.Secure != nil {
		return *m.Secure
	}
	return Default_RoomServerOption_Secure
}

func init() {
	proto.RegisterType((*RoomServerOption)(nil), "appootb.message.RoomServerOption")
}

func init() { proto.RegisterFile("room.proto", fileDescriptor_c5fd27dd97284ef4) }

var fileDescriptor_c5fd27dd97284ef4 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0x96, 0x2f, 0x27, 0x48, 0x2d, 0x45, 0x45, 0x46, 0x55, 0xae, 0xd7, 0x0a, 0xc2, 0x0d, 0x55,
	0xc4, 0x70, 0x46, 0xd0, 0x29, 0x1b, 0x81, 0x81, 0x0e, 0x88, 0x28, 0x11, 0x4b, 0x15, 0x84, 0x9c,
	0xbb, 0xc7, 0xc5, 0x6a, 0xed, 0x77, 0xd8, 0x3e, 0x3a, 0x20, 0x16, 0xfe, 0x02, 0x1b, 0xea, 0xc4,
	0xc8, 0xc6, 0xbf, 0x00, 0x56, 0x96, 0x4a, 0xac, 0xfc, 0x08, 0x46, 0x74, 0xbe, 0x3b, 0xa4, 0xa6,
	0xb0, 0xd9, 0xdf, 0xf7, 0xbd, 0xef, 0xbd, 0xf7, 0xd9, 0x94, 0x1a, 0x44, 0x95, 0x96, 0x06, 0x1d,
	0xb2, 0x6d, 0x51, 0x96, 0x88, 0x6e, 0x95, 0x2a, 0xb0, 0x56, 0x14, 0x10, 0xef, 0xb5, 0x00, 0x17,
	0xa5, 0xe4, 0x67, 0xb0, 0xb2, 0x98, 0x9d, 0x80, 0x6b, 0xd4, 0xf1, 0xad, 0x8e, 0xcc, 0x50, 0x29,
	0xd4, 0xbc, 0xd2, 0xf2, 0x75, 0x05, 0x2f, 0x65, 0xde, 0xf2, 0xb7, 0x3b, 0xbe, 0x04, 0xa3, 0xa4,
	0xb5, 0x12, 0x35, 0x57, 0xe0, 0xd6, 0xd8, 0x09, 0xf6, 0x0b, 0xc4, 0xe2, 0x14, 0xbc, 0xb9, 0xd0,
	0x1a, 0x9d, 0x70, 0x12, 0xb5, 0x6d, 0xd9, 0x81, 0xd4, 0xd9, 0x69, 0x95, 0x43, 0x73, 0x4d, 0x5e,
	0xd0, 0x1b, 0x73, 0x44, 0xb5, 0x00, 0xf3, 0x06, 0xcc, 0xb3, 0xb2, 0x56, 0x32, 0x46, 0xc3, 0x35,
	0x5a, 0x17, 0x91, 0x51, 0x30, 0xde, 0x9a, 0xfb, 0x33, 0x1b, 0xd2, 0xb0, 0x44, 0xe3, 0xa2, 0x60,
	0x44, 0xc6, 0x83, 0x49, 0xef, 0xf0, 0xf0, 0xc1, 0xdc, 0x03, 0x6c, 0x9f, 0x5e, 0xb3, 0x90, 0x55,
	0x06, 0xa2, 0xde, 0x88, 0x8c, 0xfb, 0x93, 0xd0, 0x99, 0x0a, 0xe6, 0x2d, 0x76, 0xff, 0x4b, 0x40,
	0xc3, 0xda, 0x9f, 0x21, 0xed, 0x3f, 0x96, 0xb6, 0x14, 0x2e, 0x5b, 0xb3, 0x28, 0xed, 0x02, 0x69,
	0x56, 0x4c, 0x9f, 0xfb, 0x15, 0x8f, 0xf2, 0xf8, 0x4e, 0xba, 0x11, 0x55, 0xba, 0x39, 0x5c, 0x72,
	0x70, 0x71, 0x4e, 0xbe, 0x85, 0xef, 0x7f, 0xfc, 0xfa, 0x10, 0xec, 0xb1, 0x5d, 0xde, 0xea, 0x78,
	0x1d, 0x37, 0x7f, 0x2b, 0xf3, 0x77, 0xdc, 0x7a, 0x35, 0x3b, 0xa6, 0xfd, 0x23, 0xed, 0xc0, 0x88,
	0xcc, 0xb1, 0xe1, 0x15, 0xdb, 0x85, 0x33, 0x20, 0x54, 0xfc, 0x3f, 0x22, 0x89, 0x7c, 0x97, 0x8f,
	0x3f, 0xc9, 0x36, 0x1d, 0x5c, 0xea, 0x31, 0x26, 0xf7, 0x08, 0x5b, 0xd2, 0x70, 0x01, 0x3a, 0x67,
	0x3b, 0x57, 0xca, 0x67, 0x68, 0x5d, 0xbc, 0xfb, 0x4f, 0x58, 0x09, 0x73, 0x92, 0x24, 0x17, 0xe7,
	0xe4, 0x6b, 0x33, 0xfd, 0x30, 0x61, 0x97, 0xa7, 0xb7, 0xa0, 0xf3, 0x09, 0xb9, 0x3b, 0x3d, 0xa3,
	0x37, 0x33, 0x54, 0x9b, 0x1e, 0xd3, 0xad, 0x3a, 0x8a, 0x59, 0xfd, 0x68, 0x4f, 0xc8, 0x8c, 0x1c,
	0x1f, 0x14, 0xd2, 0xad, 0x2b, 0x1f, 0x21, 0xff, 0xfb, 0x23, 0x6a, 0x76, 0x55, 0xbd, 0xe2, 0x05,
	0x76, 0xd6, 0xbf, 0x09, 0xf9, 0x14, 0xf4, 0x1e, 0xcd, 0xa6, 0x9f, 0x83, 0xeb, 0x4f, 0x1b, 0xe8,
	0x7b, 0xb0, 0xf3, 0xb0, 0x29, 0x58, 0x7a, 0xbb, 0x65, 0x8b, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff,
	0x94, 0x5a, 0xb7, 0x9b, 0xb4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomClient interface {
	// Get room connection server.
	Dispatch(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*RoomServerOption, error)
	// Room streaming interaction.
	Interact(ctx context.Context, opts ...grpc.CallOption) (Room_InteractClient, error)
	// Send room message.
	Send(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Postmark, error)
}

type roomClient struct {
	cc *grpc.ClientConn
}

func NewRoomClient(cc *grpc.ClientConn) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) Dispatch(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*RoomServerOption, error) {
	out := new(RoomServerOption)
	err := c.cc.Invoke(ctx, "/appootb.message.Room/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) Interact(ctx context.Context, opts ...grpc.CallOption) (Room_InteractClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Room_serviceDesc.Streams[0], "/appootb.message.Room/Interact", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomInteractClient{stream}
	return x, nil
}

type Room_InteractClient interface {
	Send(*Stream) error
	Recv() (*Stream, error)
	grpc.ClientStream
}

type roomInteractClient struct {
	grpc.ClientStream
}

func (x *roomInteractClient) Send(m *Stream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomInteractClient) Recv() (*Stream, error) {
	m := new(Stream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomClient) Send(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Postmark, error) {
	out := new(Postmark)
	err := c.cc.Invoke(ctx, "/appootb.message.Room/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServer is the server API for Room service.
type RoomServer interface {
	// Get room connection server.
	Dispatch(context.Context, *common.UniqueId) (*RoomServerOption, error)
	// Room streaming interaction.
	Interact(Room_InteractServer) error
	// Send room message.
	Send(context.Context, *Post) (*Postmark, error)
}

// UnimplementedRoomServer can be embedded to have forward compatible implementations.
type UnimplementedRoomServer struct {
}

func (*UnimplementedRoomServer) Dispatch(ctx context.Context, req *common.UniqueId) (*RoomServerOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (*UnimplementedRoomServer) Interact(srv Room_InteractServer) error {
	return status.Errorf(codes.Unimplemented, "method Interact not implemented")
}
func (*UnimplementedRoomServer) Send(ctx context.Context, req *Post) (*Postmark, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterRoomServer(s *grpc.Server, srv RoomServer) {
	s.RegisterService(&_Room_serviceDesc, srv)
}

func _Room_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.message.Room/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Dispatch(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_Interact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomServer).Interact(&roomInteractServer{stream})
}

type Room_InteractServer interface {
	Send(*Stream) error
	Recv() (*Stream, error)
	grpc.ServerStream
}

type roomInteractServer struct {
	grpc.ServerStream
}

func (x *roomInteractServer) Send(m *Stream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomInteractServer) Recv() (*Stream, error) {
	m := new(Stream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Room_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.message.Room/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Send(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

var _Room_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.message.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Room_Dispatch_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Room_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Interact",
			Handler:       _Room_Interact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "room.proto",
}
