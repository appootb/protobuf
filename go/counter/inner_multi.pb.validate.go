// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: inner_multi.proto

package counter

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _inner_multi_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MultiKeys with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MultiKeys) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Product

	// no validation rules for Type

	// no validation rules for Values

	return nil
}

// MultiKeysValidationError is the validation error returned by
// MultiKeys.Validate if the designated constraints aren't met.
type MultiKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiKeysValidationError) ErrorName() string { return "MultiKeysValidationError" }

// Error satisfies the builtin error interface
func (e MultiKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiKeysValidationError{}

// Validate checks the field values on MixKeys with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MixKeys) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Product

	return nil
}

// MixKeysValidationError is the validation error returned by MixKeys.Validate
// if the designated constraints aren't met.
type MixKeysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixKeysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixKeysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixKeysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixKeysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixKeysValidationError) ErrorName() string { return "MixKeysValidationError" }

// Error satisfies the builtin error interface
func (e MixKeysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixKeys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixKeysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixKeysValidationError{}

// Validate checks the field values on MixValue with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MixValue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Values

	return nil
}

// MixValueValidationError is the validation error returned by
// MixValue.Validate if the designated constraints aren't met.
type MixValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixValueValidationError) ErrorName() string { return "MixValueValidationError" }

// Error satisfies the builtin error interface
func (e MixValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixValueValidationError{}

// Validate checks the field values on MixValues with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MixValues) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetTypes() {
		_ = val

		// no validation rules for Types[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MixValuesValidationError{
					field:  fmt.Sprintf("Types[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MixValuesValidationError is the validation error returned by
// MixValues.Validate if the designated constraints aren't met.
type MixValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MixValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MixValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MixValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MixValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MixValuesValidationError) ErrorName() string { return "MixValuesValidationError" }

// Error satisfies the builtin error interface
func (e MixValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMixValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MixValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MixValuesValidationError{}
