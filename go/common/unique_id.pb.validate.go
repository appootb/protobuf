// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: unique_id.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _unique_id_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UniqueId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UniqueId) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Value.(type) {

	case *UniqueId_Id:
		// no validation rules for Id

	case *UniqueId_Uuid:
		// no validation rules for Uuid

	}

	return nil
}

// UniqueIdValidationError is the validation error returned by
// UniqueId.Validate if the designated constraints aren't met.
type UniqueIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UniqueIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UniqueIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UniqueIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UniqueIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UniqueIdValidationError) ErrorName() string { return "UniqueIdValidationError" }

// Error satisfies the builtin error interface
func (e UniqueIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUniqueId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UniqueIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UniqueIdValidationError{}

// Validate checks the field values on UniqueIds with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UniqueIds) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UniqueIdsValidationError is the validation error returned by
// UniqueIds.Validate if the designated constraints aren't met.
type UniqueIdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UniqueIdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UniqueIdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UniqueIdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UniqueIdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UniqueIdsValidationError) ErrorName() string { return "UniqueIdsValidationError" }

// Error satisfies the builtin error interface
func (e UniqueIdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUniqueIds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UniqueIdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UniqueIdsValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaginationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginationRequestValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offset

	// no validation rules for Count

	return nil
}

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaginationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for More

	// no validation rules for Next

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaginationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PaginationResponseValidationError is the validation error returned by
// PaginationResponse.Validate if the designated constraints aren't met.
type PaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResponseValidationError) ErrorName() string {
	return "PaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResponseValidationError{}
