// Code generated by protoc-gen-go. DO NOT EDIT.
// source: secret.proto

package permission

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Account secret.
type Secret struct {
	Issuer               *string              `protobuf:"bytes,1,req,name=issuer" json:"issuer,omitempty"`
	Subject              *string              `protobuf:"bytes,2,req,name=subject" json:"subject,omitempty"`
	AccountId            *uint64              `protobuf:"varint,3,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	KeyId                *string              `protobuf:"bytes,4,req,name=key_id,json=keyId" json:"key_id,omitempty"`
	Roles                []string             `protobuf:"bytes,5,rep,name=roles" json:"roles,omitempty"`
	Metadata             map[string]string    `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IssuedAt             *timestamp.Timestamp `protobuf:"bytes,7,req,name=issued_at,json=issuedAt" json:"issued_at,omitempty"`
	ExpiredAt            *timestamp.Timestamp `protobuf:"bytes,8,req,name=expired_at,json=expiredAt" json:"expired_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0}
}

func (m *Secret) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Secret.Unmarshal(m, b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
}
func (m *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(m, src)
}
func (m *Secret) XXX_Size() int {
	return xxx_messageInfo_Secret.Size(m)
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

func (m *Secret) GetIssuer() string {
	if m != nil && m.Issuer != nil {
		return *m.Issuer
	}
	return ""
}

func (m *Secret) GetSubject() string {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return ""
}

func (m *Secret) GetAccountId() uint64 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *Secret) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

func (m *Secret) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Secret) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Secret) GetIssuedAt() *timestamp.Timestamp {
	if m != nil {
		return m.IssuedAt
	}
	return nil
}

func (m *Secret) GetExpiredAt() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiredAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Secret)(nil), "appootb.permission.account.Secret")
	proto.RegisterMapType((map[string]string)(nil), "appootb.permission.account.Secret.MetadataEntry")
}

func init() { proto.RegisterFile("secret.proto", fileDescriptor_6acf428160d7a216) }

var fileDescriptor_6acf428160d7a216 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x8b, 0xdb, 0x30,
	0x10, 0x45, 0x72, 0xe2, 0xc4, 0x93, 0x16, 0x8a, 0x68, 0x83, 0x30, 0x94, 0x9a, 0x9e, 0xdc, 0x8b,
	0x5c, 0x72, 0xe9, 0xd7, 0x29, 0x29, 0x85, 0x06, 0x5a, 0x30, 0x6e, 0x4f, 0x25, 0x10, 0x64, 0x5b,
	0x75, 0xdd, 0xc4, 0x91, 0xb1, 0xe4, 0x52, 0xff, 0x80, 0xfc, 0x91, 0x1e, 0xfb, 0x53, 0xf6, 0x17,
	0xed, 0x71, 0xb1, 0xe4, 0x24, 0x2c, 0xec, 0xb2, 0x37, 0xbd, 0x37, 0xef, 0xcd, 0xcc, 0x1b, 0xc1,
	0x23, 0x25, 0xb2, 0x46, 0x68, 0x56, 0x37, 0x52, 0x4b, 0xe2, 0xf3, 0xba, 0x96, 0x52, 0xa7, 0xac,
	0x16, 0x4d, 0x55, 0x2a, 0x55, 0xca, 0x03, 0xe3, 0x59, 0x26, 0xdb, 0x83, 0xf6, 0x5f, 0x14, 0x52,
	0x16, 0x7b, 0x11, 0x19, 0x65, 0xda, 0xfe, 0x8c, 0x74, 0x59, 0x09, 0xa5, 0x79, 0x55, 0x5b, 0xf3,
	0xcb, 0xa3, 0x03, 0xee, 0x37, 0xd3, 0x8d, 0xcc, 0xc1, 0x2d, 0x95, 0x6a, 0x45, 0x43, 0x51, 0x80,
	0x43, 0x2f, 0x19, 0x10, 0xa1, 0x30, 0x51, 0x6d, 0xfa, 0x5b, 0x64, 0x9a, 0x62, 0x53, 0x38, 0x41,
	0xf2, 0x1c, 0x60, 0x18, 0xb4, 0x2d, 0x73, 0xea, 0x04, 0x38, 0x1c, 0x25, 0xde, 0xc0, 0xac, 0x73,
	0xf2, 0x0c, 0xdc, 0x9d, 0xe8, 0xfa, 0xd2, 0xc8, 0xf8, 0xc6, 0x3b, 0xd1, 0xad, 0x73, 0xf2, 0x14,
	0xc6, 0x8d, 0xdc, 0x0b, 0x45, 0xc7, 0x81, 0xd3, 0xb3, 0x06, 0x90, 0x2f, 0x30, 0xad, 0x84, 0xe6,
	0x39, 0xd7, 0x9c, 0xba, 0x81, 0x13, 0xce, 0x16, 0xaf, 0xd9, 0xfd, 0xc1, 0x98, 0xdd, 0x99, 0x7d,
	0x1d, 0x2c, 0x9f, 0x0e, 0xba, 0xe9, 0x92, 0x73, 0x07, 0xf2, 0x06, 0x3c, 0xb3, 0x7d, 0xbe, 0xe5,
	0x9a, 0x4e, 0x02, 0x1c, 0xce, 0x16, 0x3e, 0xb3, 0xb7, 0x60, 0xa7, 0x5b, 0xb0, 0xef, 0xa7, 0x5b,
	0x24, 0x53, 0x2b, 0x5e, 0x6a, 0xf2, 0x0e, 0x40, 0xfc, 0xad, 0xcb, 0xc6, 0x3a, 0xa7, 0x0f, 0x3a,
	0xbd, 0x41, 0xbd, 0xd4, 0xfe, 0x07, 0x78, 0x7c, 0x6b, 0x1d, 0xf2, 0x04, 0x9c, 0x9d, 0xe8, 0x28,
	0x0a, 0x50, 0xe8, 0x25, 0xfd, 0xb3, 0x8f, 0xfe, 0x87, 0xef, 0x5b, 0x41, 0xb1, 0xe1, 0x2c, 0x78,
	0x8f, 0xdf, 0xa2, 0xd5, 0x11, 0xc1, 0x3c, 0x93, 0xd5, 0x1d, 0x91, 0x57, 0x33, 0x9b, 0x35, 0xee,
	0x87, 0x7f, 0x46, 0x31, 0xfa, 0xf1, 0xaa, 0x28, 0xf5, 0xaf, 0x36, 0x65, 0x99, 0xac, 0xa2, 0x41,
	0x7f, 0xf9, 0xe0, 0x42, 0x46, 0x17, 0xef, 0x35, 0x42, 0xff, 0xb0, 0xf3, 0x31, 0x5e, 0xfd, 0xc7,
	0x10, 0x9f, 0xd9, 0x2b, 0x4c, 0x97, 0xd6, 0xb6, 0x31, 0x4d, 0x37, 0x97, 0xd2, 0x4d, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x87, 0xad, 0x11, 0xad, 0x5b, 0x02, 0x00, 0x00,
}
