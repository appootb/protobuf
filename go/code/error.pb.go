// Code generated by protoc-gen-go. DO NOT EDIT.
// source: error.proto

package code

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Service error code.
type Error int32

const (
	Error_UNSPECIFIED Error = 0
	//
	// Captcha service error code (base code 1000).
	//
	Error_CAPTCHA_INVALID     Error = 1001
	Error_CAPTCHA_LIMIT       Error = 1002
	Error_CAPTCHA_FAILURE     Error = 1003
	Error_CAPTCHA_TARGET      Error = 1004
	Error_CAPTCHA_FREQUENCY   Error = 1005
	Error_CAPTCHA_OTP_INVALID Error = 1006
	//
	// Account service error code (base code 2000).
	//
	Error_ACCOUNT_LOGIN_REQUIRED     Error = 2001
	Error_ACCOUNT_NOT_FOUND          Error = 2002
	Error_ACCOUNT_BLOCKED            Error = 2003
	Error_ACCOUNT_LOGIN_INVALID      Error = 2101
	Error_ACCOUNT_PWD_INVALID        Error = 2151
	Error_ACCOUNT_PWD_EXIST          Error = 2152
	Error_ACCOUNT_PWD_NOT_CHANGED    Error = 2153
	Error_ACCOUNT_BIND_NOT_FOUND     Error = 2201
	Error_ACCOUNT_UNBIND_NOT_ALLOWED Error = 2202
	Error_ACCOUNT_NICKNAME_DUP       Error = 2251
)

var Error_name = map[int32]string{
	0:    "UNSPECIFIED",
	1001: "CAPTCHA_INVALID",
	1002: "CAPTCHA_LIMIT",
	1003: "CAPTCHA_FAILURE",
	1004: "CAPTCHA_TARGET",
	1005: "CAPTCHA_FREQUENCY",
	1006: "CAPTCHA_OTP_INVALID",
	2001: "ACCOUNT_LOGIN_REQUIRED",
	2002: "ACCOUNT_NOT_FOUND",
	2003: "ACCOUNT_BLOCKED",
	2101: "ACCOUNT_LOGIN_INVALID",
	2151: "ACCOUNT_PWD_INVALID",
	2152: "ACCOUNT_PWD_EXIST",
	2153: "ACCOUNT_PWD_NOT_CHANGED",
	2201: "ACCOUNT_BIND_NOT_FOUND",
	2202: "ACCOUNT_UNBIND_NOT_ALLOWED",
	2251: "ACCOUNT_NICKNAME_DUP",
}

var Error_value = map[string]int32{
	"UNSPECIFIED":                0,
	"CAPTCHA_INVALID":            1001,
	"CAPTCHA_LIMIT":              1002,
	"CAPTCHA_FAILURE":            1003,
	"CAPTCHA_TARGET":             1004,
	"CAPTCHA_FREQUENCY":          1005,
	"CAPTCHA_OTP_INVALID":        1006,
	"ACCOUNT_LOGIN_REQUIRED":     2001,
	"ACCOUNT_NOT_FOUND":          2002,
	"ACCOUNT_BLOCKED":            2003,
	"ACCOUNT_LOGIN_INVALID":      2101,
	"ACCOUNT_PWD_INVALID":        2151,
	"ACCOUNT_PWD_EXIST":          2152,
	"ACCOUNT_PWD_NOT_CHANGED":    2153,
	"ACCOUNT_BIND_NOT_FOUND":     2201,
	"ACCOUNT_UNBIND_NOT_ALLOWED": 2202,
	"ACCOUNT_NICKNAME_DUP":       2251,
}

func (x Error) String() string {
	return proto.EnumName(Error_name, int32(x))
}

func (Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0579b252106fcf4a, []int{0}
}

func init() {
	proto.RegisterEnum("appootb.code.Error", Error_name, Error_value)
}

func init() { proto.RegisterFile("error.proto", fileDescriptor_0579b252106fcf4a) }

var fileDescriptor_0579b252106fcf4a = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbb, 0xee, 0xd3, 0x30,
	0x18, 0xc5, 0x49, 0xff, 0x40, 0x24, 0x17, 0xc8, 0x17, 0xb7, 0x14, 0x28, 0x48, 0x0c, 0x6c, 0x0c,
	0xcd, 0xc0, 0x13, 0x38, 0xb6, 0xdb, 0x5a, 0x4d, 0x1d, 0x93, 0x3a, 0x14, 0x50, 0xa5, 0x88, 0x5e,
	0x28, 0x48, 0x54, 0xae, 0xa2, 0xf6, 0x61, 0x60, 0x64, 0x64, 0x61, 0xe2, 0x25, 0x60, 0x02, 0x1e,
	0x02, 0xca, 0x6d, 0x66, 0x44, 0x0e, 0x38, 0x0a, 0xeb, 0xf9, 0x1d, 0x7f, 0xe7, 0x58, 0x07, 0xb5,
	0x37, 0x65, 0x69, 0xca, 0xc1, 0xbe, 0x34, 0x07, 0x83, 0x2f, 0x3d, 0xd9, 0xef, 0x8d, 0x39, 0x2c,
	0x07, 0x2b, 0xb3, 0xde, 0xdc, 0x7d, 0x7b, 0x86, 0x2e, 0x70, 0x4b, 0x71, 0x80, 0xda, 0xb9, 0x9c,
	0x29, 0x4e, 0xc5, 0x50, 0x70, 0x06, 0xe7, 0x70, 0x17, 0x05, 0x94, 0x28, 0x4d, 0xc7, 0xa4, 0x10,
	0xf2, 0x01, 0x49, 0x04, 0x83, 0x93, 0x8f, 0x31, 0xba, 0xec, 0xd4, 0x44, 0x4c, 0x85, 0x86, 0x6f,
	0x7e, 0xd3, 0x39, 0x24, 0x22, 0xc9, 0x33, 0x0e, 0xdf, 0x7d, 0xdc, 0x41, 0x57, 0x9c, 0xaa, 0x49,
	0x36, 0xe2, 0x1a, 0x7e, 0xf8, 0xb8, 0x87, 0xc2, 0xda, 0x9a, 0xf1, 0xfb, 0x39, 0x97, 0xf4, 0x11,
	0xfc, 0xf4, 0xf1, 0x75, 0xd4, 0x71, 0x7a, 0xaa, 0x55, 0x1d, 0xf8, 0xcb, 0xc7, 0x37, 0x51, 0x8f,
	0x50, 0x9a, 0xe6, 0x52, 0x17, 0x49, 0x3a, 0x12, 0xb2, 0xb0, 0xcf, 0x44, 0xc6, 0x19, 0x7c, 0x0c,
	0xec, 0x39, 0x07, 0x65, 0xaa, 0x8b, 0x61, 0x9a, 0x4b, 0x06, 0x9f, 0x02, 0xdb, 0xc8, 0xe9, 0x71,
	0x92, 0xd2, 0x09, 0x67, 0xf0, 0x39, 0xc0, 0x7d, 0x74, 0xf5, 0xff, 0x53, 0x2e, 0xe6, 0x1d, 0xd8,
	0x02, 0x8e, 0xa9, 0x39, 0xab, 0xc9, 0x17, 0x68, 0x66, 0x58, 0xc2, 0x1f, 0x8a, 0x99, 0x86, 0xaf,
	0x80, 0x6f, 0xa1, 0x6b, 0x4d, 0xdd, 0xe6, 0xd3, 0x31, 0x91, 0x23, 0xce, 0xe0, 0x04, 0xcd, 0xda,
	0xb1, 0x90, 0xac, 0x51, 0xef, 0x65, 0x88, 0x6f, 0xa3, 0xbe, 0x83, 0xb9, 0xac, 0x31, 0x49, 0x92,
	0x74, 0xce, 0x19, 0xbc, 0x0a, 0xf1, 0x0d, 0xd4, 0xad, 0xff, 0x25, 0xe8, 0x44, 0x92, 0x29, 0x2f,
	0x58, 0xae, 0xe0, 0x43, 0x18, 0xbf, 0x40, 0xb0, 0x32, 0xbb, 0x41, 0x73, 0xc5, 0x18, 0x55, 0x13,
	0x2a, 0xbb, 0xef, 0xd8, 0x53, 0xde, 0xe3, 0x3b, 0xdb, 0xe7, 0x87, 0x67, 0x47, 0x0b, 0x77, 0xd1,
	0x3f, 0x63, 0x54, 0xad, 0xbf, 0x3c, 0x3e, 0x8d, 0xb6, 0x26, 0xb2, 0x8f, 0x7e, 0x7b, 0xde, 0xeb,
	0xd6, 0x19, 0x55, 0xf1, 0x9b, 0xd6, 0x79, 0x6a, 0xd6, 0x9b, 0xf7, 0x2d, 0x4c, 0xfe, 0x5a, 0x17,
	0xd5, 0xa1, 0x85, 0x15, 0x97, 0x17, 0xab, 0x67, 0xf7, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x6a,
	0x28, 0x4e, 0xc4, 0x43, 0x02, 0x00, 0x00,
}
