// Code generated by protoc-gen-go. DO NOT EDIT.
// source: code.proto

package captcha

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Region.
type Region struct {
	Name                 *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Local                *string  `protobuf:"bytes,2,req,name=local" json:"local,omitempty"`
	Abbr                 *string  `protobuf:"bytes,3,req,name=abbr" json:"abbr,omitempty"`
	Code                 *string  `protobuf:"bytes,4,req,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9b0151640170c3, []int{0}
}

func (m *Region) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Region.Unmarshal(m, b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Region.Marshal(b, m, deterministic)
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return xxx_messageInfo_Region.Size(m)
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Region) GetLocal() string {
	if m != nil && m.Local != nil {
		return *m.Local
	}
	return ""
}

func (m *Region) GetAbbr() string {
	if m != nil && m.Abbr != nil {
		return *m.Abbr
	}
	return ""
}

func (m *Region) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

// Regions.
type Regions struct {
	Regions              []*Region `protobuf:"bytes,1,rep,name=regions" json:"regions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Regions) Reset()         { *m = Regions{} }
func (m *Regions) String() string { return proto.CompactTextString(m) }
func (*Regions) ProtoMessage()    {}
func (*Regions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9b0151640170c3, []int{1}
}

func (m *Regions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Regions.Unmarshal(m, b)
}
func (m *Regions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Regions.Marshal(b, m, deterministic)
}
func (m *Regions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Regions.Merge(m, src)
}
func (m *Regions) XXX_Size() int {
	return xxx_messageInfo_Regions.Size(m)
}
func (m *Regions) XXX_DiscardUnknown() {
	xxx_messageInfo_Regions.DiscardUnknown(m)
}

var xxx_messageInfo_Regions proto.InternalMessageInfo

func (m *Regions) GetRegions() []*Region {
	if m != nil {
		return m.Regions
	}
	return nil
}

// Captcha code request.
type CodeRequest struct {
	Channel              *Channel  `protobuf:"varint,1,req,name=channel,enum=appootb.captcha.Channel" json:"channel,omitempty"`
	Category             *Category `protobuf:"varint,2,req,name=category,enum=appootb.captcha.Category" json:"category,omitempty"`
	Target               *string   `protobuf:"bytes,3,req,name=target" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CodeRequest) Reset()         { *m = CodeRequest{} }
func (m *CodeRequest) String() string { return proto.CompactTextString(m) }
func (*CodeRequest) ProtoMessage()    {}
func (*CodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e9b0151640170c3, []int{2}
}

func (m *CodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeRequest.Unmarshal(m, b)
}
func (m *CodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeRequest.Marshal(b, m, deterministic)
}
func (m *CodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeRequest.Merge(m, src)
}
func (m *CodeRequest) XXX_Size() int {
	return xxx_messageInfo_CodeRequest.Size(m)
}
func (m *CodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CodeRequest proto.InternalMessageInfo

func (m *CodeRequest) GetChannel() Channel {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return Channel_CHANNEL_UNSPECIFIED
}

func (m *CodeRequest) GetCategory() Category {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return Category_CATEGORY_UNSPECIFIED
}

func (m *CodeRequest) GetTarget() string {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return ""
}

func init() {
	proto.RegisterType((*Region)(nil), "appootb.captcha.Region")
	proto.RegisterType((*Regions)(nil), "appootb.captcha.Regions")
	proto.RegisterType((*CodeRequest)(nil), "appootb.captcha.CodeRequest")
}

func init() { proto.RegisterFile("code.proto", fileDescriptor_6e9b0151640170c3) }

var fileDescriptor_6e9b0151640170c3 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd4, 0x30,
	0x10, 0xc6, 0xe5, 0xec, 0xb6, 0x4b, 0xa7, 0xa2, 0x48, 0x2e, 0x6d, 0xcd, 0x52, 0x50, 0x95, 0x03,
	0xaa, 0x38, 0xd8, 0x22, 0x12, 0x17, 0xc4, 0xa5, 0xbb, 0x42, 0x70, 0x5c, 0xe5, 0x58, 0xb5, 0x07,
	0xc7, 0x35, 0xd9, 0x48, 0x89, 0xc7, 0x24, 0x8e, 0xd0, 0x5e, 0x79, 0x02, 0x24, 0xde, 0x80, 0x23,
	0xcf, 0xc1, 0x89, 0x2b, 0xaf, 0xc0, 0x43, 0x70, 0x44, 0x8e, 0x1d, 0x2a, 0x75, 0xd5, 0xdb, 0xfc,
	0xf9, 0xe6, 0x97, 0xf9, 0x26, 0x06, 0x50, 0x78, 0xa3, 0xb9, 0x6d, 0xd1, 0x21, 0x7d, 0x24, 0xad,
	0x45, 0x74, 0x05, 0x57, 0xd2, 0x3a, 0xb5, 0x96, 0xf3, 0xd3, 0x12, 0xb1, 0xac, 0xb5, 0x90, 0xb6,
	0x12, 0xd2, 0x18, 0x74, 0xd2, 0x55, 0x68, 0xba, 0x20, 0x9f, 0x3f, 0x8d, 0xdd, 0x21, 0x2b, 0xfa,
	0x8f, 0x42, 0x37, 0xd6, 0x6d, 0x62, 0xf3, 0x61, 0x65, 0x54, 0xdd, 0x8f, 0xe8, 0xf4, 0x12, 0x76,
	0x73, 0x5d, 0x56, 0x68, 0x28, 0x85, 0xa9, 0x91, 0x8d, 0x66, 0xe4, 0x2c, 0x39, 0xdf, 0xcb, 0x87,
	0x98, 0x3e, 0x86, 0x9d, 0x1a, 0x95, 0xac, 0x59, 0x32, 0x14, 0x43, 0xe2, 0x95, 0xb2, 0x28, 0x5a,
	0x36, 0x09, 0x4a, 0x1f, 0xfb, 0x9a, 0x5f, 0x98, 0x4d, 0x43, 0xcd, 0xc7, 0xe9, 0x5b, 0x98, 0x05,
	0x76, 0x47, 0x5f, 0xc1, 0xac, 0x0d, 0x21, 0x23, 0x67, 0x93, 0xf3, 0xfd, 0xec, 0x84, 0xdf, 0xf1,
	0xc4, 0x83, 0x34, 0x1f, 0x75, 0xe9, 0x57, 0x02, 0xfb, 0x4b, 0xbc, 0xd1, 0xb9, 0xfe, 0xd4, 0xeb,
	0xce, 0xd1, 0x0c, 0x66, 0x6a, 0x2d, 0x8d, 0xd1, 0xf5, 0xb0, 0xe2, 0x41, 0xc6, 0xb6, 0x10, 0xcb,
	0xd0, 0xcf, 0x47, 0x21, 0x7d, 0x0d, 0x0f, 0x94, 0x74, 0xba, 0xc4, 0x76, 0x33, 0x58, 0x38, 0xc8,
	0x9e, 0x6c, 0x0f, 0x45, 0x41, 0xfe, 0x5f, 0x4a, 0x8f, 0x61, 0xd7, 0xc9, 0xb6, 0xd4, 0x2e, 0x5a,
	0x8c, 0x59, 0xf6, 0x93, 0xc0, 0xd4, 0xaf, 0x44, 0xaf, 0x01, 0xde, 0x6b, 0x37, 0x9a, 0x3b, 0xe6,
	0xe1, 0xe0, 0x7c, 0x3c, 0x38, 0x7f, 0xe7, 0x0f, 0x3e, 0x67, 0xf7, 0x78, 0xec, 0xd2, 0x67, 0x5f,
	0x7e, 0xff, 0xf9, 0x96, 0x9c, 0xd0, 0x23, 0x21, 0x95, 0xc2, 0xde, 0x38, 0x21, 0x7b, 0xb7, 0x16,
	0xd1, 0x3a, 0xbd, 0x86, 0x9d, 0x0b, 0x6b, 0xeb, 0x0d, 0x3d, 0xdd, 0xde, 0xf6, 0xf6, 0x22, 0xf3,
	0x7b, 0xbe, 0x9b, 0x3e, 0x1f, 0xe8, 0x2c, 0x3d, 0x14, 0x71, 0x4a, 0xf8, 0xdf, 0x21, 0xa4, 0x47,
	0xbe, 0x21, 0x2f, 0x17, 0x9f, 0xe1, 0x50, 0x61, 0x73, 0x17, 0xbd, 0xd8, 0xf3, 0xec, 0x95, 0x47,
	0x7d, 0x20, 0x2b, 0x72, 0xf9, 0xa2, 0xac, 0xdc, 0xba, 0x2f, 0xb8, 0xc2, 0x46, 0x44, 0xe9, 0xed,
	0x8b, 0x2a, 0x71, 0x64, 0xff, 0x25, 0xe4, 0x7b, 0x32, 0x59, 0xae, 0x16, 0x3f, 0x92, 0xd9, 0x32,
	0x94, 0x7e, 0x25, 0x47, 0x17, 0x61, 0xe0, 0x6a, 0xc0, 0x5d, 0xc5, 0xfa, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xeb, 0x90, 0x77, 0xf3, 0xd4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CodeClient is the client API for Code service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CodeClient interface {
	// Get regions.
	GetRegions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Regions, error)
	// Launch verification code process.
	Apply(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type codeClient struct {
	cc *grpc.ClientConn
}

func NewCodeClient(cc *grpc.ClientConn) CodeClient {
	return &codeClient{cc}
}

func (c *codeClient) GetRegions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Regions, error) {
	out := new(Regions)
	err := c.cc.Invoke(ctx, "/appootb.captcha.Code/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeClient) Apply(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.captcha.Code/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeServer is the server API for Code service.
type CodeServer interface {
	// Get regions.
	GetRegions(context.Context, *empty.Empty) (*Regions, error)
	// Launch verification code process.
	Apply(context.Context, *CodeRequest) (*empty.Empty, error)
}

// UnimplementedCodeServer can be embedded to have forward compatible implementations.
type UnimplementedCodeServer struct {
}

func (*UnimplementedCodeServer) GetRegions(ctx context.Context, req *empty.Empty) (*Regions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (*UnimplementedCodeServer) Apply(ctx context.Context, req *CodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterCodeServer(s *grpc.Server, srv CodeServer) {
	s.RegisterService(&_Code_serviceDesc, srv)
}

func _Code_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.captcha.Code/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServer).GetRegions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Code_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.captcha.Code/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeServer).Apply(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Code_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.captcha.Code",
	HandlerType: (*CodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegions",
			Handler:    _Code_GetRegions_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _Code_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.proto",
}
