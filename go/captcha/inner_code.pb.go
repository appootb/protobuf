// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inner_code.proto

package captcha

import (
	context "context"
	fmt "fmt"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("inner_code.proto", fileDescriptor_b5c4d6ed9b2e66a6) }

var fileDescriptor_b5c4d6ed9b2e66a6 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0xcb, 0x4b,
	0x2d, 0x8a, 0x4f, 0xce, 0x4f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0x2c,
	0x28, 0xc8, 0xcf, 0x2f, 0x49, 0xd2, 0x4b, 0x4e, 0x2c, 0x28, 0x49, 0xce, 0x48, 0x94, 0x52, 0x80,
	0x0a, 0xe8, 0x17, 0xa4, 0x16, 0xe5, 0x66, 0x16, 0x17, 0x67, 0xe6, 0xe7, 0xe9, 0x17, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0x43, 0xb5, 0x48, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16,
	0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x65, 0xa5,
	0xa1, 0xb2, 0x60, 0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0x54, 0x92, 0x27,
	0x39, 0x3f, 0x37, 0x37, 0x3f, 0x0f, 0xc2, 0x33, 0x7a, 0xc0, 0xc8, 0xc5, 0xe9, 0x09, 0x72, 0x90,
	0x73, 0x7e, 0x4a, 0xaa, 0x50, 0x2a, 0x17, 0x9b, 0x4f, 0x62, 0x69, 0x5e, 0x72, 0x86, 0x90, 0x8c,
	0x1e, 0x9a, 0xa3, 0xf4, 0x40, 0x0a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0xc4, 0xf4,
	0x20, 0x36, 0xe8, 0xc1, 0x6c, 0xd0, 0x73, 0x05, 0xd9, 0xa0, 0xa4, 0xda, 0x74, 0xf9, 0xc9, 0x64,
	0x26, 0x79, 0x25, 0x29, 0x7d, 0xa8, 0x2e, 0x7d, 0xb0, 0x67, 0xf5, 0x41, 0x9e, 0xd5, 0xcf, 0x01,
	0x9b, 0x6c, 0xc5, 0xa8, 0x05, 0xb2, 0x26, 0x2c, 0xb5, 0x28, 0x33, 0xad, 0x92, 0x16, 0xd6, 0x94,
	0x81, 0x4d, 0xb6, 0x62, 0xd4, 0x92, 0x62, 0x9d, 0x15, 0xc7, 0xc4, 0x91, 0xe2, 0x54, 0xc3, 0x25,
	0x9c, 0x9c, 0x9f, 0x8b, 0x6e, 0x91, 0x13, 0x1f, 0xdc, 0xdb, 0x01, 0x20, 0xd3, 0x3d, 0x18, 0x03,
	0x18, 0xa3, 0xd4, 0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xe1, 0x71,
	0x00, 0x0b, 0xc4, 0xf4, 0x7c, 0x98, 0x75, 0x3f, 0x18, 0x19, 0x17, 0x31, 0x31, 0x3b, 0x07, 0x38,
	0xad, 0x62, 0x62, 0x77, 0x86, 0x08, 0x9d, 0x62, 0x12, 0x75, 0x84, 0x68, 0x88, 0x01, 0x1b, 0x17,
	0x03, 0x15, 0x07, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x24, 0xfe, 0xd7, 0xef, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InnerCodeClient is the client API for InnerCode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InnerCodeClient interface {
	// Launch verification code process.
	Launch(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Check the verification code.
	Verify(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type innerCodeClient struct {
	cc *grpc.ClientConn
}

func NewInnerCodeClient(cc *grpc.ClientConn) InnerCodeClient {
	return &innerCodeClient{cc}
}

func (c *innerCodeClient) Launch(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.captcha.InnerCode/Launch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerCodeClient) Verify(ctx context.Context, in *CodeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.captcha.InnerCode/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnerCodeServer is the server API for InnerCode service.
type InnerCodeServer interface {
	// Launch verification code process.
	Launch(context.Context, *CodeRequest) (*empty.Empty, error)
	// Check the verification code.
	Verify(context.Context, *CodeRequest) (*empty.Empty, error)
}

// UnimplementedInnerCodeServer can be embedded to have forward compatible implementations.
type UnimplementedInnerCodeServer struct {
}

func (*UnimplementedInnerCodeServer) Launch(ctx context.Context, req *CodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Launch not implemented")
}
func (*UnimplementedInnerCodeServer) Verify(ctx context.Context, req *CodeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterInnerCodeServer(s *grpc.Server, srv InnerCodeServer) {
	s.RegisterService(&_InnerCode_serviceDesc, srv)
}

func _InnerCode_Launch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerCodeServer).Launch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.captcha.InnerCode/Launch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerCodeServer).Launch(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnerCode_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerCodeServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.captcha.InnerCode/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerCodeServer).Verify(ctx, req.(*CodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InnerCode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.captcha.InnerCode",
	HandlerType: (*InnerCodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Launch",
			Handler:    _InnerCode_Launch_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _InnerCode_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner_code.proto",
}
