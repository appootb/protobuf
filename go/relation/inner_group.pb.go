// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inner_group.proto

package relation

import (
	context "context"
	fmt "fmt"
	common "github.com/appootb/protobuf/go/common"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("inner_group.proto", fileDescriptor_c2906a98371b18ce) }

var fileDescriptor_c2906a98371b18ce = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x49, 0xbe, 0x6f, 0xa1, 0x03, 0xa2, 0x06, 0x11, 0x0d, 0xa2, 0xa5, 0x08, 0xa2, 0x42,
	0x06, 0x7d, 0x03, 0xeb, 0xa2, 0x76, 0x21, 0x94, 0x8a, 0x1b, 0x29, 0x96, 0x34, 0xb9, 0xc6, 0x81,
	0xce, 0xdc, 0xe9, 0xfc, 0x71, 0x23, 0x05, 0x2b, 0xf8, 0x04, 0x6e, 0x5c, 0xbb, 0xf4, 0x51, 0xdc,
	0xfa, 0x0a, 0x3e, 0x84, 0x4b, 0xc9, 0x74, 0x52, 0x41, 0xc9, 0x76, 0xce, 0xbd, 0xf7, 0xfc, 0xce,
	0x19, 0xb2, 0xca, 0x84, 0x00, 0x35, 0x28, 0x14, 0x5a, 0x99, 0x48, 0x85, 0x06, 0xa3, 0x95, 0x54,
	0x4a, 0x44, 0x33, 0x4c, 0x14, 0x8c, 0x52, 0xc3, 0x50, 0xc4, 0xdb, 0xfe, 0x85, 0x66, 0xc8, 0x39,
	0x0a, 0x6a, 0x05, 0x1b, 0x5b, 0x18, 0xb0, 0x7c, 0xb6, 0x11, 0x37, 0x2a, 0x5d, 0x82, 0xe2, 0x4c,
	0x6b, 0x86, 0x82, 0x6a, 0x50, 0x77, 0x2c, 0x03, 0x3f, 0xb1, 0x55, 0x20, 0x16, 0x23, 0xa0, 0xa9,
	0x64, 0x34, 0x15, 0x02, 0x8d, 0x3b, 0xac, 0xbd, 0xba, 0xc4, 0x44, 0x36, 0xb2, 0xb9, 0x1f, 0x3e,
	0x7e, 0x0a, 0x09, 0xe9, 0x94, 0x58, 0xed, 0x92, 0x2a, 0xe2, 0x84, 0xb4, 0xc1, 0x9c, 0x03, 0x1f,
	0x82, 0xd2, 0xd1, 0x46, 0x52, 0xe1, 0xcd, 0x60, 0x92, 0x4b, 0x07, 0xd3, 0xc9, 0xe3, 0xcd, 0x3a,
	0x45, 0x37, 0x0f, 0x1e, 0x3f, 0x3e, 0x9f, 0xc3, 0xdd, 0xa8, 0x49, 0xab, 0x4c, 0xd4, 0xe5, 0xa6,
	0x2e, 0x37, 0xbd, 0x67, 0xf9, 0x84, 0x72, 0x6f, 0x30, 0x0d, 0xc8, 0x62, 0x47, 0x57, 0x76, 0x3b,
	0xc9, 0xef, 0x36, 0x92, 0x0b, 0x93, 0x1a, 0xab, 0x7b, 0x30, 0xb6, 0xa0, 0x4d, 0xdc, 0xa8, 0x1f,
	0xd0, 0x12, 0x85, 0x86, 0xe6, 0x91, 0x33, 0x3f, 0x8c, 0xf6, 0x6b, 0xcc, 0x4d, 0xaa, 0x0a, 0x30,
	0x13, 0xca, 0xf4, 0xc0, 0x33, 0xc4, 0xff, 0x5f, 0xae, 0x1f, 0xc2, 0xd6, 0x34, 0x20, 0x6b, 0x19,
	0xf2, 0x3f, 0x06, 0xad, 0xe5, 0x9f, 0x76, 0xba, 0x65, 0x63, 0x67, 0x41, 0x37, 0xb8, 0xda, 0x2b,
	0x98, 0xb9, 0xb5, 0x2e, 0x3c, 0x9d, 0xff, 0x47, 0xa9, 0x0e, 0xed, 0x0d, 0x2d, 0x70, 0x6e, 0xfe,
	0x15, 0x04, 0xaf, 0xe1, 0xbf, 0xd3, 0x6e, 0xeb, 0x2d, 0x5c, 0xe8, 0xf9, 0xb7, 0xf7, 0x70, 0xfd,
	0x64, 0xb6, 0xd2, 0x77, 0x07, 0xfb, 0x95, 0xf0, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x57, 0x3f,
	0x63, 0x20, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InnerGroupClient is the client API for InnerGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InnerGroupClient interface {
	// Get group members.
	GetMembers(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*common.UniqueIds, error)
	// Check is group members.
	IsMembers(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type innerGroupClient struct {
	cc *grpc.ClientConn
}

func NewInnerGroupClient(cc *grpc.ClientConn) InnerGroupClient {
	return &innerGroupClient{cc}
}

func (c *innerGroupClient) GetMembers(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*common.UniqueIds, error) {
	out := new(common.UniqueIds)
	err := c.cc.Invoke(ctx, "/appootb.relation.InnerGroup/GetMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *innerGroupClient) IsMembers(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/appootb.relation.InnerGroup/IsMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnerGroupServer is the server API for InnerGroup service.
type InnerGroupServer interface {
	// Get group members.
	GetMembers(context.Context, *common.UniqueId) (*common.UniqueIds, error)
	// Check is group members.
	IsMembers(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedInnerGroupServer can be embedded to have forward compatible implementations.
type UnimplementedInnerGroupServer struct {
}

func (*UnimplementedInnerGroupServer) GetMembers(ctx context.Context, req *common.UniqueId) (*common.UniqueIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (*UnimplementedInnerGroupServer) IsMembers(ctx context.Context, req *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMembers not implemented")
}

func RegisterInnerGroupServer(s *grpc.Server, srv InnerGroupServer) {
	s.RegisterService(&_InnerGroup_serviceDesc, srv)
}

func _InnerGroup_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerGroupServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.InnerGroup/GetMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerGroupServer).GetMembers(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _InnerGroup_IsMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerGroupServer).IsMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.InnerGroup/IsMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerGroupServer).IsMembers(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InnerGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.relation.InnerGroup",
	HandlerType: (*InnerGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _InnerGroup_GetMembers_Handler,
		},
		{
			MethodName: "IsMembers",
			Handler:    _InnerGroup_IsMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inner_group.proto",
}
