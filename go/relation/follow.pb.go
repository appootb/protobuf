// Code generated by protoc-gen-go. DO NOT EDIT.
// source: follow.proto

package relation

import (
	context "context"
	fmt "fmt"
	common "github.com/appootb/protobuf/go/common"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("follow.proto", fileDescriptor_a311fc0325a30114) }

var fileDescriptor_a311fc0325a30114 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0x14, 0x31,
	0x18, 0xc6, 0x99, 0x6d, 0x29, 0x12, 0x5b, 0x90, 0x20, 0xa5, 0xae, 0xda, 0xea, 0xa8, 0xb5, 0xec,
	0x21, 0x41, 0x8f, 0xde, 0x76, 0x8b, 0x7f, 0x7a, 0x5b, 0x0a, 0x5e, 0xa4, 0x20, 0xe9, 0xe4, 0x9d,
	0x69, 0x60, 0x26, 0x6f, 0x3a, 0xc9, 0x20, 0x45, 0xf6, 0xe2, 0xcd, 0xb3, 0x57, 0x4f, 0x1e, 0xfd,
	0x20, 0x22, 0x5e, 0xbd, 0xf8, 0x01, 0xfc, 0x10, 0x1e, 0x65, 0x92, 0xc9, 0x14, 0x76, 0x99, 0x3d,
	0x26, 0x4f, 0xde, 0xe7, 0xf7, 0xe4, 0xe1, 0x25, 0xdb, 0x39, 0x96, 0x25, 0x7e, 0x60, 0xa6, 0x46,
	0x87, 0xf4, 0x96, 0x30, 0x06, 0xd1, 0x9d, 0xb3, 0x1a, 0x4a, 0xe1, 0x14, 0xea, 0xf1, 0x7e, 0x77,
	0xc3, 0x33, 0xac, 0x2a, 0xd4, 0xbc, 0xd1, 0xea, 0xb2, 0x81, 0xf7, 0x4a, 0x86, 0x89, 0xf1, 0x41,
	0xd4, 0x0d, 0xd4, 0x95, 0xb2, 0x56, 0xa1, 0xe6, 0x15, 0xb8, 0x0b, 0x8c, 0x0f, 0xee, 0x15, 0x88,
	0x45, 0x09, 0x5c, 0x18, 0xc5, 0x85, 0xd6, 0xe8, 0xbc, 0xaf, 0xed, 0xd4, 0xbb, 0x9d, 0xea, 0x4f,
	0xe7, 0x4d, 0xce, 0xa1, 0x32, 0xee, 0xaa, 0x13, 0x77, 0x94, 0xce, 0xca, 0x46, 0x42, 0x38, 0x3e,
	0xff, 0xb1, 0x49, 0xb6, 0x5e, 0xf9, 0xb4, 0xd4, 0x90, 0x8d, 0xa9, 0x94, 0x74, 0x9f, 0x2d, 0xe7,
	0x65, 0x53, 0x63, 0xca, 0xab, 0x53, 0xb8, 0x6c, 0xc0, 0xba, 0xf1, 0x2e, 0x0b, 0xf6, 0x2c, 0xda,
	0xb3, 0x97, 0xad, 0x7d, 0xfa, 0xec, 0xcf, 0xd7, 0xe4, 0xe7, 0xe6, 0xa7, 0xdf, 0x7f, 0xbf, 0x8c,
	0x0e, 0xd3, 0x87, 0x3c, 0x0e, 0xf3, 0xd0, 0x05, 0x17, 0x59, 0x86, 0x8d, 0x76, 0xfc, 0xa3, 0x13,
	0x75, 0x01, 0x6e, 0xf1, 0x22, 0x99, 0xd0, 0x9c, 0x6c, 0x1d, 0x0b, 0x9d, 0x41, 0x49, 0xf7, 0x7a,
	0x68, 0xa8, 0x84, 0xbd, 0xf5, 0x95, 0x9c, 0xc8, 0x41, 0xdc, 0xe4, 0x1a, 0x77, 0x30, 0xb9, 0x3f,
	0x8c, 0x53, 0x72, 0x41, 0x35, 0xd9, 0x79, 0x0d, 0x2e, 0x7c, 0x53, 0xe9, 0xc2, 0xae, 0xc1, 0xdd,
	0x19, 0x52, 0x6c, 0x7a, 0xe4, 0x61, 0x29, 0x7d, 0xb0, 0x02, 0xcb, 0x7b, 0xe7, 0xc0, 0xfb, 0x9c,
	0x90, 0xed, 0x1e, 0x08, 0xb5, 0xa5, 0x8f, 0x96, 0x5d, 0xe7, 0xa2, 0x50, 0xda, 0x7b, 0x9c, 0xc8,
	0x58, 0xec, 0xe3, 0xf5, 0x8f, 0xac, 0x41, 0x6d, 0x21, 0x65, 0x3e, 0xc5, 0x11, 0x3d, 0x1c, 0x48,
	0x01, 0xb5, 0x8d, 0x1d, 0xb3, 0x36, 0x4b, 0x4e, 0x48, 0x1b, 0xa5, 0x56, 0xa0, 0xa5, 0xa5, 0x03,
	0x6d, 0xae, 0xfb, 0xf6, 0x93, 0xeb, 0xa2, 0xc7, 0x74, 0x6f, 0x95, 0x1a, 0x9c, 0x67, 0x0b, 0x72,
	0x3b, 0xc3, 0x6a, 0x65, 0x77, 0x66, 0x37, 0x43, 0x0b, 0xf3, 0x96, 0xf7, 0x26, 0x99, 0x27, 0xef,
	0x9e, 0x16, 0xca, 0x5d, 0x34, 0x1e, 0xc4, 0xfb, 0x3d, 0x8f, 0x9b, 0x5a, 0x60, 0x0f, 0xf8, 0x97,
	0x24, 0xdf, 0x46, 0x1b, 0xc7, 0xf3, 0xd9, 0xf7, 0xd1, 0x8d, 0xd3, 0xee, 0xee, 0xd7, 0x68, 0x77,
	0x1a, 0x46, 0xce, 0xbc, 0xe1, 0x59, 0x14, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x94, 0x50, 0x90,
	0x6e, 0x73, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FollowClient is the client API for Follow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FollowClient interface {
	// Add follow.
	Add(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Cancel follow.
	Cancel(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get account followings.
	GetFollowings(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*common.UniqueIds, error)
	// Get account followers.
	GetFollowers(ctx context.Context, in *common.PaginationIdRequest, opts ...grpc.CallOption) (*common.PaginationIdResponse, error)
	// Get account friends.
	GetFriends(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.UniqueIds, error)
}

type followClient struct {
	cc *grpc.ClientConn
}

func NewFollowClient(cc *grpc.ClientConn) FollowClient {
	return &followClient{cc}
}

func (c *followClient) Add(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.relation.Follow/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) Cancel(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.relation.Follow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowings(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*common.UniqueIds, error) {
	out := new(common.UniqueIds)
	err := c.cc.Invoke(ctx, "/appootb.relation.Follow/GetFollowings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFollowers(ctx context.Context, in *common.PaginationIdRequest, opts ...grpc.CallOption) (*common.PaginationIdResponse, error) {
	out := new(common.PaginationIdResponse)
	err := c.cc.Invoke(ctx, "/appootb.relation.Follow/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followClient) GetFriends(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.UniqueIds, error) {
	out := new(common.UniqueIds)
	err := c.cc.Invoke(ctx, "/appootb.relation.Follow/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServer is the server API for Follow service.
type FollowServer interface {
	// Add follow.
	Add(context.Context, *ApplyRequest) (*empty.Empty, error)
	// Cancel follow.
	Cancel(context.Context, *common.UniqueId) (*empty.Empty, error)
	// Get account followings.
	GetFollowings(context.Context, *common.UniqueId) (*common.UniqueIds, error)
	// Get account followers.
	GetFollowers(context.Context, *common.PaginationIdRequest) (*common.PaginationIdResponse, error)
	// Get account friends.
	GetFriends(context.Context, *empty.Empty) (*common.UniqueIds, error)
}

// UnimplementedFollowServer can be embedded to have forward compatible implementations.
type UnimplementedFollowServer struct {
}

func (*UnimplementedFollowServer) Add(ctx context.Context, req *ApplyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedFollowServer) Cancel(ctx context.Context, req *common.UniqueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedFollowServer) GetFollowings(ctx context.Context, req *common.UniqueId) (*common.UniqueIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowings not implemented")
}
func (*UnimplementedFollowServer) GetFollowers(ctx context.Context, req *common.PaginationIdRequest) (*common.PaginationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (*UnimplementedFollowServer) GetFriends(ctx context.Context, req *empty.Empty) (*common.UniqueIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}

func RegisterFollowServer(s *grpc.Server, srv FollowServer) {
	s.RegisterService(&_Follow_serviceDesc, srv)
}

func _Follow_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Follow/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).Add(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Follow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).Cancel(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Follow/GetFollowings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowings(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PaginationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Follow/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFollowers(ctx, req.(*common.PaginationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follow_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Follow/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServer).GetFriends(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Follow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.relation.Follow",
	HandlerType: (*FollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Follow_Add_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Follow_Cancel_Handler,
		},
		{
			MethodName: "GetFollowings",
			Handler:    _Follow_GetFollowings_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _Follow_GetFollowers_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _Follow_GetFriends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follow.proto",
}
