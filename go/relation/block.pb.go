// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

package relation

import (
	context "context"
	fmt "fmt"
	common "github.com/appootb/protobuf/go/common"
	_ "github.com/appootb/protobuf/go/permission"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d) }

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xca, 0xc9, 0x4f,
	0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x2c, 0x28, 0xc8, 0xcf, 0x2f, 0x49,
	0xd2, 0x2b, 0x4a, 0xcd, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0x92, 0x83, 0x8a, 0xe8, 0x27, 0xe7,
	0xe7, 0xe6, 0xe6, 0xe7, 0xe9, 0x97, 0xe6, 0x65, 0x16, 0x96, 0xa6, 0xc6, 0x67, 0xa6, 0x40, 0x74,
	0x48, 0xc9, 0xc3, 0xe4, 0x0b, 0x52, 0x8b, 0x72, 0x33, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0xf4, 0x73,
	0x53, 0x4b, 0x32, 0xf2, 0x61, 0x0a, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b,
	0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0xc0, 0xe6, 0x16, 0x43, 0x65, 0xa5, 0xa1, 0xb2, 0x60,
	0x5e, 0x52, 0x69, 0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0x44, 0xd2, 0xe8, 0x28, 0x23, 0x17,
	0xab, 0x13, 0xc8, 0x75, 0x42, 0xb1, 0x5c, 0xcc, 0x8e, 0x29, 0x29, 0x42, 0x12, 0x7a, 0x30, 0xf7,
	0x41, 0x5c, 0xa3, 0x17, 0x0a, 0x76, 0x8d, 0x67, 0x8a, 0x94, 0x98, 0x1e, 0xc4, 0x20, 0x3d, 0x98,
	0x41, 0x7a, 0xae, 0x20, 0x83, 0x94, 0x54, 0x6e, 0xcc, 0x61, 0x3c, 0xc1, 0xd2, 0x74, 0xf9, 0xc9,
	0x64, 0x26, 0x49, 0x25, 0x11, 0x7d, 0x98, 0xb7, 0xf4, 0xc1, 0x9e, 0xd6, 0xaf, 0xce, 0x4c, 0xa9,
	0xb5, 0x62, 0xd4, 0x12, 0x8a, 0xe5, 0x62, 0x73, 0x4e, 0xcc, 0x4b, 0x4e, 0xcd, 0x21, 0xc3, 0x06,
	0x45, 0x84, 0x0d, 0x62, 0x5a, 0x58, 0x6d, 0x70, 0xaa, 0xe1, 0x12, 0x49, 0xce, 0xcf, 0xd5, 0x43,
	0x0f, 0x5b, 0x27, 0x2e, 0xb0, 0xe7, 0x02, 0x40, 0xe6, 0x79, 0x30, 0x06, 0x30, 0x46, 0xa9, 0xa7,
	0x67, 0x96, 0x64, 0x94, 0x82, 0xad, 0xd6, 0x87, 0x07, 0x2b, 0x2c, 0x60, 0xd2, 0xf3, 0xe1, 0x66,
	0xff, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1c, 0xe0, 0xb4, 0x8a, 0x89, 0x23, 0x08, 0x2a, 0x76,
	0x8a, 0x49, 0xcc, 0x11, 0xa2, 0x25, 0x06, 0x6c, 0x60, 0x0c, 0x4c, 0x02, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xae, 0x15, 0x59, 0x82, 0xe1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockClient is the client API for Block service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockClient interface {
	// Block the specified account ID.
	Add(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unblock the specified account ID.
	Cancel(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type blockClient struct {
	cc *grpc.ClientConn
}

func NewBlockClient(cc *grpc.ClientConn) BlockClient {
	return &blockClient{cc}
}

func (c *blockClient) Add(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.relation.Block/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockClient) Cancel(ctx context.Context, in *common.UniqueId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/appootb.relation.Block/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockServer is the server API for Block service.
type BlockServer interface {
	// Block the specified account ID.
	Add(context.Context, *common.UniqueId) (*empty.Empty, error)
	// Unblock the specified account ID.
	Cancel(context.Context, *common.UniqueId) (*empty.Empty, error)
}

// UnimplementedBlockServer can be embedded to have forward compatible implementations.
type UnimplementedBlockServer struct {
}

func (*UnimplementedBlockServer) Add(ctx context.Context, req *common.UniqueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedBlockServer) Cancel(ctx context.Context, req *common.UniqueId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}

func RegisterBlockServer(s *grpc.Server, srv BlockServer) {
	s.RegisterService(&_Block_serviceDesc, srv)
}

func _Block_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Block/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).Add(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Block_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UniqueId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appootb.relation.Block/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServer).Cancel(ctx, req.(*common.UniqueId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Block_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appootb.relation.Block",
	HandlerType: (*BlockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Block_Add_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Block_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
