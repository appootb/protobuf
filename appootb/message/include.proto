syntax = "proto2";

package appootb.message;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option optimize_for = SPEED;

option csharp_namespace = "Message";
option go_package = "github.com/appootb/protobuf/go/message";
option java_multiple_files = true;
option java_outer_classname = "CommonProto";
option java_package = "com.appootb.message";
option objc_class_prefix = "CPB";
option php_namespace = "Appootb\\Proto\\Message";


// Message category enums.
enum Category {
  CATEGORY_UNSPECIFIED = 0; // Unspecified

  CATEGORY_PRIVATE = 1; // Private chat
  CATEGORY_GROUP   = 2; // Group chat
  CATEGORY_CHANNEL = 3; // Channel
  CATEGORY_ROOM    = 4; // Chatroom
}

// Message type enums.
enum Type {
  TYPE_UNSPECIFIED = 0; // Unspecified

  TYPE_TEXT    = 1; // Text
  TYPE_AUDIO   = 2; // Audio
  TYPE_STICKER = 3; // Sticker
  TYPE_PHOTO   = 4; // Photo
  TYPE_VIDEO   = 5; // Video

  TYPE_GIF      = 6;  // Gif
  TYPE_FILE     = 7;  // File
  TYPE_LOCATION = 8;  // Location
  TYPE_CONTACT  = 9;  // Contact
  TYPE_RECALL   = 10; // Recall

  TYPE_READ = 11; // Message read receipt
}

// Message postmark.
message Postmark {
  required Category category  = 1; // Message category
  required uint64   sender    = 2; // Sender ID
  required uint64   receiver  = 3; // Receiver/group/room/channel ID
  optional uint64   unique_id = 4; // Message ID, generated in server-side

  optional google.protobuf.Duration  expire    = 8; // Message expiration
  optional google.protobuf.Timestamp timestamp = 9; // Message timestamp
}

// Text message.
message Text {
  required string content = 1; // Text content
}

// Media message.
message Media {
  required string url       = 1; // Original URL of photo/video
  optional string thumbnail = 2; // Thumbnail for photo/video
}

// Location coordinate.
message Location {
  required float latitude  = 1; // Latitude
  required float longitude = 2; // Longitude
}

// Message post.
message Post {
  required Postmark postmark = 1; // Message postmark
  required Type     type     = 2; // Message type

  // Message content
  oneof envelope {
    Text     text       = 10; // Text content
    Media    resource   = 11; // Media resource
    Location coordinate = 12; // Location coordinate
  }
}

// Message postbox.
message Postbox {
  repeated Post posts = 1; // Message posts
}

// Message receipts.
message Receipts {
  repeated ClientId local_ids = 1; // Client latest IDs
  repeated Postmark postmarks = 2; // Message postmarks
}

// Client local ID.
message ClientId {
  required Category category = 1; // Message category
  optional uint64   last_id  = 2; // Client latest ID
}

// Client local IDs.
message ClientIds {
  repeated ClientId ids = 1; // Client latest IDs
}

//
// Streaming
//

// Message stream payload type.
enum PayloadType {
  PAYLOAD_TYPE_UNSPECIFIED = 0; // Unspecified

  PAYLOAD_TYPE_PING     = 1; // Heartbeat ping
  PAYLOAD_TYPE_PONG     = 2; // Heartbeat pong
  PAYLOAD_TYPE_SYNC     = 3; // Sync messages (client -> server)
  PAYLOAD_TYPE_MESSAGES = 4; // Message notify (server -> client)
  PAYLOAD_TYPE_RECEIPTS = 5; // Message notify receipts (client -> server)
}

// Message streaming.
message Stream {
  required string sn     = 1; // Stream SN
  optional uint64 target = 2; // Target ID, e.g. room ID for room streaming

  required PayloadType type = 3; // Stream payload type

  // Payload data
  oneof payload {
    ClientIds local    = 10; // Upstream sync message request (type: PAYLOAD_TYPE_SYNC)
    Postbox   postbox  = 11; // Downstream message notify (type: PAYLOAD_TYPE_MESSAGES)
    Receipts  receipts = 12; // Upstream receipts (type: PAYLOAD_TYPE_RECEIPTS)
  }
}

//
// Streaming Connection
//

// Connections.
message Connections {
  required string product    = 1; // Product name
  repeated string unique_ids = 2; // Unique IDs
}

// Connection tags.
message Tag {
  required string product  = 1; // Product name
  required string name     = 2; // Tag name
  optional bool   prefixed = 3; // If tag name is prefixed
}

// Router package.
message Package {
  // Target
  oneof target {
    Tag         tag  = 1; // Broadcast to specified tag(s)
    Connections conn = 2; // Forward to specified connections
  }

  required string sn    = 8; // Package sn
  repeated Post   posts = 9; // Message posts
}
